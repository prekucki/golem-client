var N=null,E="",T="t",U="u",searchIndex={};
var R=["wamp_derive","golem_rpc_api","node_name","result","string","error","golem_rpc_api::net","try_from","borrow","type_id","borrow_mut","try_into","formatter","serialize","deserialize","NodeInfo","PeerInfo","NetStatus","GolemNet","actix_wamp","errorkind","ErrorKind","AuthMethod","typeid"];
searchIndex[R[19]]={"doc":E,"i":[[4,R[21],R[19],"WAMP pre-defined error URIs.",N,N],[13,"InvalidURI",E,"Peer provided an incorrect URI for any URI-based attribute…",0,N],[13,"NoSuchProcedure",E,"A Dealer could not perform a call, since no procedure is…",0,N],[13,"ProcedureAlreadyExists",E,"A procedure could not be registered, since a procedure…",0,N],[13,"NoSuchRegistration",E,"A Dealer could not perform an unregister, since the given…",0,N],[13,"NoSuchSubscription",E,"A Broker could not perform an unsubscribe, since the given…",0,N],[13,"InvalidArgument",E,"A call failed since the given argument types or values are…",0,N],[13,"SystemShutdown",E,"The Peer is shutting down completely - used as a GOODBYE…",0,N],[13,"CloseRealm",E,"The Peer want to leave the realm - used as a GOODBYE reason.",0,N],[13,"GoodbyeAndOut",E,"A Peer acknowledges ending of a session - used as a…",0,N],[13,"NotAuthorized",E,"A join, call, register, publish or subscribe failed, since…",0,N],[13,"AuthorizationFailed",E,"A Dealer or Broker could not determine if the Peer is…",0,N],[13,"NoSuchRealm",E,"Peer wanted to join a non-existing realm (and the Router…",0,N],[13,"NoSuchRole",E,"A Peer was to be authenticated under a Role that does not…",0,N],[13,"Canceled",E,"uriDealer or Callee canceled a call previously issued",0,N],[13,"OptionNotAllowed",E,"A Peer requested an interaction with an option that was…",0,N],[13,"NoEligibleCallee",E,"A Dealer could not perform a call, since a procedure with…",0,N],[13,"NetworkFailure",E,"A Router encountered a network failure",0,N],[13,"Other",E,"Any other error code.",0,N],[5,"challenge_response_auth",E,"Creates WAMP Challenge-Response authentication proivder…",N,N],[11,"uri",E,E,0,[[["self"]],["str"]]],[11,"from_uri",E,E,0,[[["str"]],["self"]]],[8,R[22],E,E,N,N],[10,"auth_method",E,E,1,[[["self"]],["str"]]],[10,"challenge",E,E,1,[[["self"],["str"],["map",[R[4],"value"]]],[R[3],[R[5]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[7],E,E,0,[[[U]],[R[3]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[23]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[3]]]],[11,"eq",E,E,0,[[["self"],[R[20]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[20]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[3]]]],[11,R[13],E,E,0,[[["self"],["s"]],[R[3]]]]],"p":[[4,R[21]],[8,R[22]]]};
searchIndex["golemcli"]={"doc":E,"i":[],"p":[]};
searchIndex[R[0]]={"doc":E,"i":[[23,"wamp_interface",R[0],E,N,N],[23,"wamp",E,E,N,N]],"p":[]};
searchIndex[R[1]]={"doc":E,"i":[[4,"Error",R[1],E,N,N],[0,"comp",E,E,N,N],[8,"GolemComp","golem_rpc_api::comp",E,N,N],[0,"net",R[1],E,N,N],[3,R[15],R[6],E,N,N],[12,R[2],E,E,0,N],[12,"key",E,E,0,N],[12,"prv_port",E,E,0,N],[12,"pub_port",E,E,0,N],[12,"p2p_prv_port",E,E,0,N],[12,"p2p_pub_port",E,E,0,N],[12,"prv_addr",E,E,0,N],[12,"pub_addr",E,E,0,N],[12,"prv_addresses",E,E,0,N],[12,"nat_type",E,E,0,N],[3,R[16],E,E,N,N],[12,"address",E,E,1,N],[12,"port",E,E,1,N],[12,"verified",E,E,1,N],[12,"degree",E,E,1,N],[12,"key_id",E,E,1,N],[12,R[2],E,E,1,N],[12,"node_info",E,E,1,N],[12,"listen_port",E,E,1,N],[12,"conn_id",E,E,1,N],[3,R[17],E,E,N,N],[12,"listening",E,E,2,N],[12,"connected",E,E,2,N],[12,"port_statuses",E,E,2,N],[12,"msg",E,E,2,N],[8,R[18],E,E,N,N],[10,"get_node",E,E,3,[[["self"]],[R[3],["nodeinfo",R[5]]]]],[10,"get_node_key",E,E,3,[[["self"]],[R[3],[R[4],R[5]]]]],[10,"get_node_name",E,E,3,[[["self"]],[R[3],[R[4],R[5]]]]],[10,"get_p2p_port",E,E,3,[[["self"]],[R[3],["u16",R[5]]]]],[10,"get_task_server_port",E,E,3,[[["self"]],[R[3],["u16",R[5]]]]],[10,"connection_status",E,E,3,[[["self"]],[R[3],["netstatus",R[5]]]]],[10,"connect",E,"Connect to specific node",3,N],[10,"block_node",E,"Returns:",3,[[["self"],[R[4]]],[R[3],[R[5]]]]],[10,"get_known_peers",E,E,3,[[["self"]],[R[3],["vec",R[5]]]]],[10,"get_connected_peers",E,E,3,[[["self"]],[R[3],["vec",R[5]]]]],[11,"from",R[1],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[7],E,E,4,[[[U]],[R[3]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[23]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[3]]]],[11,"from",R[6],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[7],E,E,0,[[[U]],[R[3]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[23]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[3]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[7],E,E,1,[[[U]],[R[3]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[23]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[3]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[7],E,E,2,[[[U]],[R[3]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[23]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[3]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[3]]]],[11,"fmt",E,E,1,[[["self"],[R[12]]],[R[3]]]],[11,"fmt",E,E,2,[[["self"],[R[12]]],[R[3]]]],[11,R[13],E,E,0,[[["self"],["__s"]],[R[3]]]],[11,R[13],E,E,1,[[["self"],["__s"]],[R[3]]]],[11,R[13],E,E,2,[[["self"],["__s"]],[R[3]]]],[11,R[14],E,E,0,[[["__d"]],[R[3]]]],[11,R[14],E,E,1,[[["__d"]],[R[3]]]],[11,R[14],E,E,2,[[["__d"]],[R[3]]]]],"p":[[3,R[15]],[3,R[16]],[3,R[17]],[8,R[18]],[4,"Error"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);